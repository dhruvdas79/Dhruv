module pattern(
input clk,
input in,
input rst,
output reg detected);
typedef enum reg [1:0]{
  s0=2'b00,
  s1=2'b01,
  s2=2'b10,
  s3=2'b11
  }state;
  state present_state,next_state;
  always @(posedge clk or posedge rst) begin
    if (rst)
	present_state<=s0;
	else
	present_state<=next_state;
	end
always @(*) begin
  case(present_state)
  s0:present_state=(in==1)?s1:s0;
  s1: next_state = (in == 1)?s2:s0;
  s2: next_state = (in == 0)?s3:s2;
  s3: next_state = (in == 1)?s1:s0;
        default: next_state = s0;
    endcase
	end
	always @(*) begin
    detected = (present_state == s3) ? 1 : 0;
end

endmodule

